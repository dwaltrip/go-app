<%# I should consider extracting the image determination logic into the view method %>
<%# potentially then this partial would simply render an array of image_path_names %>

<% base_path = "game_board/#{tile_size}px"; %>

<% if tile[:horiz_edge] == :left %>
  <tr>
<% end %>

<% unless tile[:stone] %>
  <% if tile[:star_point?]   %>
    <% img_filename = "star_point" %>
  <% elsif tile[:in_center?] %>
    <% img_filename = "center" %>
  <% else %>
    <% img_filename = '' %>

    <% if tile[:vert_edge] %>
      <% img_filename << tile[:vert_edge].to_s %>
    <% end %>

    <% if tile[:horiz_edge] %>
      <% img_filename << "_" unless img_filename.blank? %>
      <% img_filename << tile[:horiz_edge].to_s %>
    <% end %>
  <% end %>

  <% sub_directory = "blank_tiles" %>
  <% if tile[:ko?] %>
    <% sub_directory = 'ko_marker_tiles' %>
  <% end %>

  <% img_path = "#{base_path}/#{sub_directory}/#{img_filename}.png" %>

<% else %>
  <% img_filename = "white_stone" %>
  <% if tile[:stone] == :black %>
    <% img_filename = "black_stone" %>
  <% end %>
  <% img_filename << "_highlighted" if tile[:most_recent_stone?] %>

  <% img_path = "#{base_path}/#{img_filename}.png" %>

<% end %>

<td>
  <% container_class = "tile_container" %>
  <% if tile[:invalid_move?] or (viewer_type != :active_player) %>
    <% container_class << " not-clickable" %>
  <% else %>
    <% container_class << " clickable" %>
  <% end %>

  <%= content_tag :div, :class => container_class, "data-board-pos" => tile_counter do %>
    <% img_params = {
        "data-board-pos" => tile_counter,
        alt: "#{img_filename.gsub('_', ' ')} tile",
        class: "board_tile"
      }
    %>
    <%= image_tag(img_path, img_params) %>
    <% if viewer_type != :observer and not tile[:invalid_move?] %>
      <%= image_tag(
        "#{base_path}/#{viewer_color}_stone_preview.png",
        { alt: "preview stone", class: "preview_stone"  }
        )
      %>
    <% end %>
  <% end %>
</td>

<% if tile[:horiz_edge] == :right %>
  </tr>
<% end %>
